from tools.nmap import nmap
from tools.gobuster import gobuster
from tools.sqlmap import sqlmap
from tools.ssh_bruteforce import ssh_bruteforce
from tools.ssh_login import ssh_login
from tools.wpscan import wpscan
from tools.ghostcat import ghostcat
from tools.shellshock import shellshock
from tools.spring4shell import spring4shell
from tools.log4shell import log4shell
from tools.gospider import gospider
from tools.zap import zap
from report import Report

class framework:
    def __init__(self, ip, debug=False):
        self.ip = ip
        self.debug = debug
        self.gobuster_wordlist = "/usr/share/wordlists/dirb/small.txt"
        self.tools_output = dict()
        self.ports_open = []
        self.directory_list = []
        self.ssh_creds = {
            "username": "",
            "password": "",
        }


        self.report = Report()
        self.nmap = nmap(self.ip)
        self.gobuster = gobuster(self.ip, self.gobuster_wordlist)
        self.sqlmap = sqlmap(self.ip, self.directory_list)
        self.ssh_bruteforce = ssh_bruteforce(self.ip)
        self.ssh_login = ssh_login(self.ip, self.ssh_creds["username"], self.ssh_creds["password"])
        self.wpscan = wpscan(self.ip)
        self.ghostcat = ghostcat(self.ip)
        self.shellshock = shellshock(self.ip)
        self.spring4shell = spring4shell(self.ip)
        self.log4shell = log4shell(self.ip)
        self.gospider = gospider(self.ip)
        self.zap = zap(self.ip)

    def run_nmap(self):
        if self.debug:
            print("Running nmap")
        
        nmap_output = self.nmap.run()

        if nmap_output['status'] == 'success':
            print("Nmap output", nmap_output['output'])
            self.tools_output["nmap"] = nmap_output['output']
            self.ports_open = self.nmap.get_open_ports()
            print("Open ports:", self.ports_open)
            self.report.write_tool_output("nmap", nmap_output['output'], self.nmap.port_service_version_list)
            return 1
        else:
            return -1
    
    def run_gobuster(self):
        if 80 in self.ports_open:
            gobuster_output = self.gobuster.run()
            if gobuster_output['status'] == 'success':
                self.tools_output["gobuster"] = gobuster_output['output']
                gobuster_directory_list = self.gobuster.get_directory_list()
                print("Gobuster features", gobuster_directory_list)
                self.directory_list.extend(gobuster_directory_list)
                self.report.write_tool_output('gobuster', gobuster_output['output'], self.gobuster.directories)
                
                return 1
            else:
                return 0

        else:
            return -1
    
    def run_gospider(self):
        if 80 in self.ports_open:
            gospider_output = self.gospider.run()
            if gospider_output['status'] == 'success':
                self.tools_output["spider"] = gospider_output['output']
                gospider_urls = self.gospider.get_urls()
                print("Gospider features", gospider_urls)
                self.directory_list.extend(gospider_urls)
                self.report.write_tool_output('gospider', gospider_output['output'], self.gospider.urls)
                return 1
            else:
                return 0

        else:
            return -1
            
    def run_sqlmap(self):
        if 80 in self.ports_open and len(self.directory_list) > 0:
            sqlmap_output = self.sqlmap.run()
            if sqlmap_output['status'] == 'success':
                self.tools_output["sqlmap"] = sqlmap_output['output']
                sqlmap_feature_output = self.sqlmap.get_sqlmap_output()
                print("Sqlmap features:", sqlmap_feature_output)
                self.report.write_tool_output('sqlmap', sqlmap_output['output'], sqlmap_feature_output)
                if len(sqlmap_feature_output) > 0:
                    return 1
                else:
                    return 0
            else:
                return 0
        else:
            return -1
    
    def run_ssh_bruteforce(self):
        if 22 in self.ports_open:
            ssh_bruteforce_output = self.ssh_bruteforce.run()
            if ssh_bruteforce_output['status'] == 'success':
                self.tools_output["ssh_bruteforce"] = ssh_bruteforce_output['output']
                self.report.write_tool_output('ssh bruteforce', ssh_bruteforce_output['output'])
                return 1
            else:
                return 0
        else:
            return -1

    def run_ssh_login(self):
        if 22 in self.ports_open:
            ssh_login_output = self.ssh_login.run()
            if ssh_login_output['status'] == 'success':
                self.tools_output["ssh_login"] = ssh_login_output['output']
                self.report.write_tool_output('ssh_login', ssh_login_output['output'])
                return 1
            else:
                return 0
        else:
            return -1

    def run_wpscan(self):
        if 80 in self.ports_open:
            wpscan_output = self.wpscan.run()
            if wpscan_output['status'] == 'success':
                self.tools_output["wpscan"] = wpscan_output['output']
                self.report.write_tool_output('wpscan', wpscan_output['output'])
                return 1
            else:
                return 0
        else:
            return -1

    def run_ghostcat(self):
        if 80 in self.ports_open:
            ghostcat_output = self.ghostcat.run()
            if ghostcat_output['status'] == 'success':
                self.tools_output["ghostcat"] = ghostcat_output['output']
                self.report.write_tool_output('ghostcat', ghostcat_output['output'])
                return 1
            else:
                return 0
        else:
            return -1

    def run_shellshock(self):
        if 80 in self.ports_open:
            shellshock_output = self.shellshock.run()
            if shellshock_output['status'] == 'success':
                self.tools_output["shellshock"] = shellshock_output['output']
                self.report.write_tool_output('shellshock', shellshock_output['output'])
                return 1
            else:
                return 0
        else:
            return -1
    
    def run_spring4shell(self):
        if 80 in self.ports_open:
            spring4shell_output = self.spring4shell.run()
            if spring4shell_output['status'] == 'success':
                self.tools_output["spring4shell"] = spring4shell_output['output']
                self.report.write_tool_output('spring4shell', spring4shell_output['output'])
                return 1
            else:
                return 0
        else:
            return -1

    def run_log4shell(self):
        if 80 in self.ports_open:
            log4shell_output = self.log4shell.run()
            if log4shell_output['status'] == 'success':
                self.tools_output["log4shell"] = log4shell_output
                self.report.write_tool_output('log4shell', log4shell_output['output'])
                return 1
            else:
                return 0
        else:
            return -1
        
    def run_zap(self):
        if 80 in self.ports_open:
            zap_output = self.zap.run()
            if zap_output['status'] == 'success':
                self.tools_output["zap"] = zap_output['output']
                zap_features_output = self.zap.get_zap_output()
                self.report.write_tool_output('zap', zap_output['output'], zap_features_output)
                if zap_features_output is not None and len(zap_features_output) > 0:
                    return 1
                else:
                    return 0
            else:
                return 0
        else:
            return -1
    
    def finish(self):
        self.report.save()
    


# MAIN
_framework = framework("10.10.92.194")
print(_framework.run_nmap())
print(_framework.run_gobuster())
print(_framework.run_gospider())
# print(_framework.run_zap())
print(_framework.run_sqlmap())

# framework.run_ssh_bruteforce()
# framework.run_ghostcat()
# print(framework.tools_output)
# _framework.report.generate_report(output)
_framework.finish()