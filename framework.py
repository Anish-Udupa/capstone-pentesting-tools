from tools.nmap import nmap
from tools.gobuster import gobuster
from tools.sqlmap import sqlmap
from tools.ssh_bruteforce import ssh_bruteforce
from tools.ssh_login import ssh_login
from tools.wpscan import wpscan
from tools.ghostcat import ghostcat
from tools.shellshock import shellshock
from tools.spring4shell import spring4shell
from tools.log4shell import log4shell
from tools.gospider import gospider
from tools.zap import zap
from report import Report
from pymongo.mongo_client import MongoClient
from pymongo.server_api import ServerApi
from datetime import datetime
from dotenv import load_dotenv
import os

class framework:
    def __init__(self, ip, debug=False, training=False):
        self.training = training
        self.ip = ip
        self.debug = debug
        # self.gobuster_wordlist = "/usr/share/wordlists/dirb/small.txt"
        self.gobuster_wordlist = os.path.join(os.path.dirname(__file__), "tools/wordlists/directory.txt")
        # print(self.gobuster_wordlist)
        self.tools_output = dict()
        self.ports_open = []
        self.directory_list = []
        self.urls = []
        self.ssh_creds = {
            "username": "",
            "password": "",
        }


        self.report = Report(self.ip)
        self.nmap = nmap(self.ip)
        self.gobuster = gobuster(self.ip, self.gobuster_wordlist)
        self.sqlmap = sqlmap(self.ip, self.urls)
        self.ssh_bruteforce = ssh_bruteforce(self.ip)
        self.ssh_login = ssh_login(self.ip, self.ssh_creds)
        self.wpscan = wpscan(self.ip)
        self.ghostcat = ghostcat(self.ip)
        self.shellshock = shellshock(self.ip)
        self.spring4shell = spring4shell(self.ip)
        self.log4shell = log4shell(self.ip)
        self.gospider = gospider(self.ip, self.directory_list)
        self.zap = zap(self.ip)

        load_dotenv()
        username = os.getenv("MONGO_USERNAME")
        password = os.getenv("MONGO_PASSWORD")

        uri = f"mongodb+srv://{username}:{password}@mongocluster.9xak4za.mongodb.net/?retryWrites=true&w=majority"
        # Create a new client and connect to the server
        self.client = MongoClient(uri, server_api=ServerApi('1'))
        db = self.client["capstone-pentest-db"]
        collection_name = f"collection_{datetime.now().strftime('%d_%m_%y_%H_%M_%S')}"
        self.collection = db[collection_name]

    def reset_framework(self):
        self.tools_output = dict()
        self.ports_open = []
        self.directory_list = []
        self.urls = []
        self.ssh_creds = {
            "username": "",
            "password": "",
        }

        self.nmap = nmap(self.ip)
        self.gobuster = gobuster(self.ip, self.gobuster_wordlist)
        self.sqlmap = sqlmap(self.ip, self.urls)
        self.ssh_bruteforce = ssh_bruteforce(self.ip)
        self.ssh_login = ssh_login(self.ip, self.ssh_creds)
        self.wpscan = wpscan(self.ip)
        self.ghostcat = ghostcat(self.ip)
        self.shellshock = shellshock(self.ip)
        self.spring4shell = spring4shell(self.ip)
        self.log4shell = log4shell(self.ip)
        self.gospider = gospider(self.ip, self.directory_list)
        self.zap = zap(self.ip)

    def generate_mongo_find_query(self, tool_name):
        return {
            "tool_name": tool_name,
            "ports_open": self.ports_open,
            "directory_list": self.directory_list,
            "urls": self.urls,
            "ssh_creds": self.ssh_creds,
        }


    def display_framework_state(self, tool_name):
        print({
            "tool_name": tool_name,
            "ports_open": self.ports_open,
            "directory_list": self.directory_list,
            "urls": self.urls,
            "ssh_creds": self.ssh_creds,
        })

    def run_nmap(self):

        if self.training is True:
            query = self.generate_mongo_find_query("nmap")
            simplified_query = {
                    "tool_name": query["tool_name"],
            }
            result = self.collection.find_one(simplified_query)
            # result = self.collection.find_one(query)
            # print(result)

            if result is not None and len(result) > 0:
                # print("Retrieved from db")  # Comment this later
                ret_val = result['ret_val']
                if ret_val == 1:
                    self.ports_open = result["tool_output"]
                return ret_val
            else:
                # print("Running the tool")   # Comment this later
                nmap_output = self.nmap.run()
                print(nmap_output)
                ret_val = 0
                if nmap_output['status'] == 'success':
                    self.tools_output["nmap"] = nmap_output['output']
                    # self.ports_open = self.nmap.get_open_ports()
                    # print("Nmap features:", self.nmap.port_service_version_list)
                    # print("Open ports:", self.ports_open)
                    # self.report.write_tool_output("nmap", nmap_output['output'], self.nmap.port_service_version_list)
                    ret_val = 1
                else:
                    ret_val = -1
                
                query = self.generate_mongo_find_query("nmap")
                query["ret_val"] = ret_val
                query["tool_output"] = self.nmap.get_open_ports()
                self.collection.insert_one(query)

                if ret_val == 1:
                    self.ports_open = self.nmap.get_open_ports()
                    print("Nmap features:", self.nmap.port_service_version_list)
                return ret_val

        else:
            nmap_output = self.nmap.run()
            print(nmap_output)
            if nmap_output['status'] == 'success':
                self.tools_output["nmap"] = nmap_output['output']
                self.ports_open = self.nmap.get_open_ports()
                print("Open ports:", self.ports_open)
                self.report.write_tool_output("nmap", nmap_output['output'], self.nmap.port_service_version_list)
                return 1
            else:
                return -1
    
    def run_gobuster(self):
        if 80 in self.ports_open or 443 in self.ports_open:
            if self.training is True:
                query = self.generate_mongo_find_query("gobuster")
                result = self.collection.find_one(query)
                # print(result)

                if result is not None and len(result) > 0:
                    ret_val = result['ret_val']
                    if ret_val == 1:
                        gobuster_directory_list = result["tool_output"]
                        # print("Gobuster features", gobuster_directory_list)
                        self.directory_list.extend(gobuster_directory_list)
                        self.directory_list = list(set(self.directory_list))    # Removing duplicates
                    return ret_val
                else:
                    gobuster_output = self.gobuster.run()
                    print(gobuster_output)
                    ret_val = 0
                    if gobuster_output['status'] == 'success':
                        self.tools_output["gobuster"] = gobuster_output['output']
                        # self.report.write_tool_output('gobuster', gobuster_output['output'], self.gobuster.directories)
                        ret_val = 1
                    else:
                        ret_val = 0
                    
                    query = self.generate_mongo_find_query("gobuster")
                    query["ret_val"] = ret_val
                    query["tool_output"] = self.gobuster.get_directory_list()
                    self.collection.insert_one(query)

                    if ret_val == 1:
                        gobuster_directory_list = self.gobuster.get_directory_list()
                        print("Gobuster features", gobuster_directory_list)
                        self.directory_list.extend(gobuster_directory_list)
                        self.directory_list = list(set(self.directory_list))    # Removing duplicates
                    return ret_val

            else:
                gobuster_output = self.gobuster.run()
                print(gobuster_output)
                if gobuster_output['status'] == 'success':
                    self.tools_output["gobuster"] = gobuster_output['output']
                    gobuster_directory_list = self.gobuster.get_directory_list()
                    print("Gobuster features", gobuster_directory_list)
                    self.directory_list.extend(gobuster_directory_list)
                    self.directory_list = list(set(self.directory_list))    # Removing duplicates
                    self.report.write_tool_output('gobuster', gobuster_output['output'], self.gobuster.directories)
                    
                    return 1
                else:
                    return 0

        else:
            return -1
    
    def run_gospider(self):
        if 80 in self.ports_open or 443 in self.ports_open:
            if self.training is True:
                query = self.generate_mongo_find_query("gospider")
                result = self.collection.find_one(query)
                # print(result)

                if result is not None and len(result) > 0:
                    ret_val = result['ret_val']
                    if ret_val == 1:
                        gospider_urls = result["tool_output"]
                        # print("Gospider features", gospider_urls)
                        self.urls.extend(gospider_urls)
                        self.urls = list(set(self.urls))    # Removing duplicate entries
                    return ret_val
                else:
                    ret_val = 0
                    gospider_output = self.gospider.run()
                    print(gospider_output)
                    if gospider_output['status'] == 'success':
                        self.tools_output["gospider"] = gospider_output['output']
                        # self.report.write_tool_output('gospider', gospider_output['output'], self.gospider.urls)
                        ret_val = 1
                    else:
                        ret_val = 0
                    
                    query = self.generate_mongo_find_query("gospider")
                    query["ret_val"] = ret_val
                    query["tool_output"] = self.gospider.get_urls()
                    self.collection.insert_one(query)

                    if ret_val == 1:
                        gospider_urls = self.gospider.get_urls()
                        print("Gospider features", gospider_urls)
                        self.urls.extend(gospider_urls)
                        self.urls = list(set(self.urls))    # Removing duplicate entries
                    return ret_val

            else:
                gospider_output = self.gospider.run()
                print(gospider_output)
                if gospider_output['status'] == 'success':
                    self.tools_output["gospider"] = gospider_output['output']
                    gospider_urls = self.gospider.get_urls()
                    print("Gospider features", gospider_urls)
                    self.urls.extend(gospider_urls)
                    self.urls = list(set(self.urls))    # Removing duplicate entries
                    self.report.write_tool_output('gospider', gospider_output['output'], self.gospider.urls)
                    return 1
                else:
                    return 0

        else:
            return -1
            
    def run_sqlmap(self):
        if 80 in self.ports_open or 443 in self.ports_open and len(self.directory_list) > 0:
            if self.training is True:
                query = self.generate_mongo_find_query("sqlmap")
                result = self.collection.find_one(query)
                # print(result)

                if result is not None and len(result) > 0:
                    ret_val = result['ret_val']
                    return ret_val
                else:
                    ret_val = 0

                    sqlmap_output = self.sqlmap.run()
                    print(sqlmap_output)
                    if sqlmap_output['status'] == 'success':
                        self.tools_output["sqlmap"] = sqlmap_output['output']
                        sqlmap_feature_output = self.sqlmap.get_sqlmap_output()
                        print("Sqlmap features:", sqlmap_feature_output)
                        # self.report.write_tool_output('sqlmap', sqlmap_output['output'], sqlmap_feature_output)
                        if len(sqlmap_feature_output) > 0:
                            ret_val = 1
                        else:
                            ret_val = 0
                    
                    query = self.generate_mongo_find_query("gospider")
                    query["ret_val"] = ret_val
                    self.collection.insert_one(query)
                    return ret_val

            else:
                sqlmap_output = self.sqlmap.run()
                print(sqlmap_output)
                if sqlmap_output['status'] == 'success':
                    self.tools_output["sqlmap"] = sqlmap_output['output']
                    sqlmap_feature_output = self.sqlmap.get_sqlmap_output()
                    # print("Sqlmap features:", sqlmap_feature_output)
                    self.report.write_tool_output('sqlmap', sqlmap_output['output'], sqlmap_feature_output)
                    if len(sqlmap_feature_output) > 0:
                        return 1
                    else:
                        return 0
                else:
                    return 0
        else:
            return -1
    
    def run_ssh_bruteforce(self):
        if 22 in self.ports_open:
            if self.training is True:
                query = self.generate_mongo_find_query("ssh_bruteforce")
                simplified_query = {
                    "tool_name": query["tool_name"],
                    "ports_open": query["ports_open"],
                }
                result = self.collection.find_one(simplified_query)
                # result = self.collection.find_one(query)
                # print(result)

                if result is not None and len(result) > 0:
                    ret_val = result['ret_val']
                    if ret_val == 1:
                        self.ssh_creds.update(result["tool_output"])
                    return ret_val
                else:
                    ret_val = 0

                    ssh_bruteforce_output = self.ssh_bruteforce.run()
                    print(ssh_bruteforce_output)
                    if ssh_bruteforce_output['status'] == 'success':
                        self.tools_output["ssh_bruteforce"] = ssh_bruteforce_output['output']
                        # self.report.write_tool_output('ssh bruteforce', ssh_bruteforce_output['output'])
                        ret_val = 1
                    else:
                        ret_val = 0
                    
                    query = self.generate_mongo_find_query("ssh_bruteforce")
                    query["ret_val"] = ret_val
                    query["tool_output"] = self.ssh_bruteforce.get_credentials()
                    self.collection.insert_one(query)

                    if ret_val == 1:
                        ssh_creds = self.ssh_bruteforce.get_credentials()
                        print("SSH bruteforce features:", ssh_creds)
                        self.ssh_creds.update(ssh_creds)
                    return ret_val

            else:
                ssh_bruteforce_output = self.ssh_bruteforce.run()
                print(ssh_bruteforce_output)
                if ssh_bruteforce_output['status'] == 'success':
                    self.tools_output["ssh_bruteforce"] = ssh_bruteforce_output['output']
                    ssh_creds = self.ssh_bruteforce.get_credentials()
                    print("SSH bruteforce features:", ssh_creds)
                    self.ssh_creds = ssh_creds
                    self.report.write_tool_output('ssh bruteforce', ssh_bruteforce_output['output'], ssh_creds)
                    return 1
                else:
                    return 0
        else:
            return -1

    def run_ssh_login(self):
        if 22 in self.ports_open:
            if self.training is True:
                query = self.generate_mongo_find_query("ssh_login")
                simplified_query = {
                    "tool_name": query["tool_name"],
                    "ports_open": query["ports_open"],
                    "ssh_creds": query["ssh_creds"],
                }
                result = self.collection.find_one(simplified_query)
                # result = self.collection.find_one(query)
                # print(result)

                if result is not None and len(result) > 0:
                    ret_val = result['ret_val']
                    return ret_val
                else:
                    ret_val = 0

                    ssh_login_output = self.ssh_login.run()
                    print(ssh_login_output)
                    if ssh_login_output['status'] == 'success':
                        self.tools_output["ssh_login"] = ssh_login_output['output']
                        self.report.write_tool_output('ssh_login', ssh_login_output['output'])
                        ret_val = 1
                    else:
                        ret_val = 0
                    
                    query = self.generate_mongo_find_query("ssh_login")
                    query["ret_val"] = ret_val
                    self.collection.insert_one(query)
                    return ret_val

            else:
                ssh_login_output = self.ssh_login.run()
                print(ssh_login_output)
                if ssh_login_output['status'] == 'success':
                    self.tools_output["ssh_login"] = ssh_login_output['output']
                    self.report.write_tool_output('ssh_login', ssh_login_output['output'])
                    return 1
                else:
                    return 0
        else:
            return -1

    def run_wpscan(self):
        if 80 in self.ports_open or 443 in self.ports_open:
            if self.training is True:
                query = self.generate_mongo_find_query("wpscan")
                simplified_query = {
                    "tool_name": query["tool_name"],
                    "ports_open": query["ports_open"],
                }
                result = self.collection.find_one(simplified_query)
                # result = self.collection.find_one(query)
                # print(result)

                if result is not None and len(result) > 0:
                    ret_val = result['ret_val']
                    return ret_val
                else:
                    ret_val = 0

                    wpscan_output = self.wpscan.run()
                    print(wpscan_output)
                    if wpscan_output['status'] == 'success':
                        self.tools_output["wpscan"] = wpscan_output['output']
                        wpscan_features = self.wpscan.get_wpscan_features()
                        print("Wpscan features:", wpscan_features)
                        # self.report.write_tool_output('wpscan', wpscan_output['output'])
                        ret_val = 1
                    else:
                        ret_val = 0
                    
                    query = self.generate_mongo_find_query("wpscan")
                    query["ret_val"] = ret_val
                    self.collection.insert_one(query)
                    return ret_val

            else:
                wpscan_output = self.wpscan.run()
                print(wpscan_output)
                if wpscan_output['status'] == 'success':
                    self.tools_output["wpscan"] = wpscan_output['output']
                    wpscan_features = self.wpscan.get_wpscan_features()
                    print("Wpscan features:", wpscan_features)
                    self.report.write_tool_output('wpscan', wpscan_output['output'], wpscan_features)
                    return 1
                else:
                    return 0
        else:
            return -1

    def run_ghostcat(self):
        if 8080 in self.ports_open or 8009 in self.ports_open:
            if self.training is True:
                query = self.generate_mongo_find_query("ghostcat")
                simplified_query = {
                    "tool_name": query["tool_name"],
                    "ports_open": query["ports_open"],
                }
                result = self.collection.find_one(simplified_query)
                # result = self.collection.find_one(query)
                # print(result)

                if result is not None and len(result) > 0:
                    ret_val = result['ret_val']
                    return ret_val
                else:
                    ret_val = 0

                    ghostcat_output = self.ghostcat.run()
                    print(ghostcat_output)
                    if ghostcat_output['status'] == 'success':
                        self.tools_output["ghostcat"] = ghostcat_output['output']
                        ghostcat_features = self.ghostcat.get_ghostcat_output()
                        print("Ghostcat features:", ghostcat_features)
                        # self.report.write_tool_output('ghostcat', ghostcat_output['output'])
                        ret_val = 1
                    else:
                        ret_val = 0
                    
                    query = self.generate_mongo_find_query("ghostcat")
                    query["ret_val"] = ret_val
                    self.collection.insert_one(query)
                    return ret_val

            else:
                ghostcat_output = self.ghostcat.run()
                print(ghostcat_output)
                if ghostcat_output['status'] == 'success':
                    self.tools_output["ghostcat"] = ghostcat_output['output']
                    ghostcat_features = self.ghostcat.get_ghostcat_output()
                    print("Ghostcat features:", ghostcat_features)
                    self.report.write_tool_output('ghostcat', ghostcat_output['output'], ghostcat_features)
                    return 1
                else:
                    return 0
        else:
            return -1

    def run_shellshock(self):
        if 80 in self.ports_open or 443 in self.ports_open:
            shellshock_output = self.shellshock.run()
            if shellshock_output['status'] == 'success':
                self.tools_output["shellshock"] = shellshock_output['output']
                self.report.write_tool_output('shellshock', shellshock_output['output'])
                return 1
            else:
                return 0
        else:
            return -1
    
    def run_spring4shell(self):
        if 80 in self.ports_open or 443 in self.ports_open:
            spring4shell_output = self.spring4shell.run()
            if spring4shell_output['status'] == 'success':
                self.tools_output["spring4shell"] = spring4shell_output['output']
                self.report.write_tool_output('spring4shell', spring4shell_output['output'])
                return 1
            else:
                return 0
        else:
            return -1

    def run_log4shell(self):
        if 80 in self.ports_open or 443 in self.ports_open:
            log4shell_output = self.log4shell.run()
            if log4shell_output['status'] == 'success':
                self.tools_output["log4shell"] = log4shell_output
                self.report.write_tool_output('log4shell', log4shell_output['output'])
                return 1
            else:
                return 0
        else:
            return -1
        
    def run_zap(self):
        if 80 in self.ports_open or 443 in self.ports_open:
            if self.training is True:
                query = self.generate_mongo_find_query("zap")
                simplified_query = {
                    "tool_name": query["tool_name"],
                    "ports_open": query["ports_open"],
                }
                result = self.collection.find_one(simplified_query)
                # print(result)

                if result is not None and len(result) > 0:
                    ret_val = result['ret_val']
                    return ret_val
                else:
                    ret_val = 0
                    https_flag = False
                    if 443 in self.ports_open:
                        https_flag = True
                    zap_output = self.zap.run(https=https_flag)
                    print(zap_output)
                    if zap_output['status'] == 'success':
                        self.tools_output["zap"] = zap_output['output']
                        zap_features_output = self.zap.get_zap_output()
                        print("ZAP features", zap_features_output)
                        # self.report.write_tool_output('zap', zap_output['output'], zap_features_output)
                        if zap_features_output is not None and len(zap_features_output) > 0:
                            ret_val = 1
                        else:
                            ret_val = 0
                    else:
                        ret_val = 0
                    
                    query = self.generate_mongo_find_query("zap")
                    query["ret_val"] = ret_val
                    self.collection.insert_one(query)
                    return ret_val

            else:
                https_flag = False
                if 443 in self.ports_open:
                    https_flag = True
                zap_output = self.zap.run(https=https_flag)
                print(zap_output)
                if zap_output['status'] == 'success':
                    self.tools_output["zap"] = zap_output['output']
                    zap_features_output = self.zap.get_zap_output()
                    print("ZAP features", zap_features_output)
                    self.report.write_tool_output('zap', zap_output['output'], zap_features_output)
                    if zap_features_output is not None and len(zap_features_output) > 0:
                        return 1
                    else:
                        return 0
                else:
                    return 0
        else:
            return -1
    
    def finish(self):
        self.report.save()
    


# MAIN
#_framework = framework("10.10.231.237", training=False)
#print(_framework.run_nmap())
# # print(_framework.run_nmap())
#print(_framework.run_gobuster())
#print(_framework.run_gospider())
# print(_framework.run_zap())
#print(_framework.run_sqlmap())

# # framework.run_ssh_bruteforce()
# # framework.run_ghostcat()
# # print(framework.tools_output)
# # _framework.report.generate_report(output)
#_framework.finish()