from .util import run_command
import re
from .generative import GenAi
import ast
class nmap:
    def __init__(self, ip):
        self.ip = ip
        self.port_service_version_list = []
        self.genai=GenAi()

    def extract_features(self, data):
        query="Return a list of dictionaries containing the following key value pairs: port open, service, and the version.If no ports are open return an empty list only without any text explaining or introduction . The output should either be '[]' or a populated list"
        return_format='[{"port":"number","service":"service_name","version":"service_version"}]'
        soln=self.genai.get(query,return_format,data)
        soln=ast.literal_eval(soln)
        # print(soln)
        if len(soln)>0:
            self.port_service_version_list=soln
            return True
        else:
            return False

    def get_open_ports(self):
        # re_pattern_port = "([0-9]+)/tcp"
        # ports = re.findall(re_pattern_port, output)
        # self.open_ports = [int(port) for port in ports]
        # print("debug:", self.port_service_version_list)
        ret = [int(port_info['port']) for port_info in self.port_service_version_list]
        return ret

    def get_features(self):
        return self.features

    def run(self):
        cmd = f"nmap -sT -A {self.ip}"
        result = run_command(cmd)
        print(result)

        features_success = False
        if result['status'] == 'success':
            output = result["output"]
            features_success = self.extract_features(output)
            # print(features_success)
            if features_success is True:
                result['status'] = 'success'
            else:
                result['status'] = 'failure'
        return result
