from .util import run_command
from .generative import GenAi
import ast

class sqlmap:
    def __init__(self, ip, url_list=[]):
        self.ip = ip
        self.url_list = url_list
        self.dbms='' #contains DBMS information
        self.database=[] #contains database information
        self.genai=GenAi()
        self.questions = [
            "List the DBMS software information",
            "List all databases",
            "List all tables that are not present by default",
            "List the table schema and the  data present in each table",
            "List all users and their privileges",
            "What would you rate the sensitivity of the data present (0 being the lowest and 10 being the highest)"
        ]
    
    # [{
    #     dbname: "",
    #     tables: [
    #         {
    #             table_name: "",
    #             row_list: [
    #                 ['col1_val', 'col2val'],
    #             ]
    #         },
    #     ]
    # }]

    def extract_features(self,data):
        query=["Return the DBMS software information","List of dictionaries containing database name which are not default or pre defined databases, tables in these database. If no database or table specified return an empty list '[]' not random values"]# and the content of each table"]
        return_format=['string containing the information','[{"dbname": name if any database present else "[]", "tables":[tablenames from output if present,...]}]']
        # return_format=['string containing the information','[user1,user2]','[{"dbname": name, "tables":{table_name:name,row_list:[[col1val,col2val....]]}]']
        soln1=self.genai.get(query[0],return_format[0],data)
        soln2=self.genai.get(query[1],return_format[1],data)
        soln2=ast.literal_eval(soln2)
        if len(soln1)>0 and len(soln2)>0:
            self.dbms=soln1
            self.database=soln2
            return True
        else:
            return False
        
    def get_sqlmap_output(self):
        if len(self.dbms) > 0 and len(self.database) > 0:
            return {
                "dbms": self.dbms,
                "database": self.database
            }
        else:
            return {}
    
    def run(self):
        result = {
            "status": "failure",
        }

        for url in self.url_list:
            # cmd = f"sqlmap -u http://{self.ip}/{directory}/"
            cmd = f"sqlmap --batch -v 0 -dbs -tables -u {url} --crawl=3 --level=2 --risk=3"
            result = run_command(cmd)
            print(result)

            features_success = False
            if result['status'] == 'success':
                output = result["output"]
                features_success = self.extract_features(output)
                
                if features_success is True:
                    result['status'] = 'success'
                    break
                else:
                    result['status'] = 'failure'
        return result
