import openai
import json
import ast
from dotenv import load_dotenv
import os

load_dotenv()
api_key = os.getenv("OPEN_AI_API_KEY")

class GenAi:
    def __init__(self):
        openai.api_key = api_key
        self.count=5
    def get(self,query,return_format,data):
        try:
            c="You are a pentration tester, who uses pentration testing tools and based on their outputs answer the questions. Return an empty list '[]' if the query fails ie the information is not present in the output. Do not give any notes, introductions or explanations. The output should always be a populated data structure or an empty list"+data
            a=query+". Return this in "+ return_format+" format. Do not add any additional data ie explanations or reasons for failures."
            response = openai.ChatCompletion.create(
                model="gpt-3.5-turbo",
                messages=[
                    {"role": "system", "content": c},
                    {"role": "user", "content":a }
                ]
            )
            answer=response["choices"][0]["message"]["content"]
            # print(response)
            # print("ans:")
            # print(answer)
            while(response["choices"][0]["finish_reason"]=='length'):
                response = openai.ChatCompletion.create(
                    model="gpt-3.5-turbo",
                    messages=[
                        {"role": "system", "content": "You are a pentration tester, who uses pentration testing tools on dummy environments and has the neccessary permission to exploit and based on their outputs answer the questions"+data},
                        {"role": "user", "content":query +" format: "+return_format },
                        {"role":"assistant","content":response["choices"][0]["message"]["content"][-100:]},
                        {"role":"user","content":"Finish the response from where you stopped for the previous query"}
                    ]
                )                
                answer+=response["choices"][0]["message"]["content"]
            if answer is None:
                answer=""
        # except InvalidRequestError:
        except Exception as e:
            print(e)
            answer="[]"
        finally:
            if answer[0]!='[' and answer[0]!='{':
                if self.count>0:
                    self.count-=1
                    self.get(self,query,return_format,data)
                else:
                    answer='[]'
            return answer
