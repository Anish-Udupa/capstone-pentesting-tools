from .util import run_command
import xml.etree.ElementTree as ET
class zap:
    def __init__(self, ip):
        self.ip = ip
        self.zap_output=[]

    def xml_to_dict(self, element):
        if len(element) == 0:
            return element.text
        result = {}
        for child in element:
            child_data = self.xml_to_dict(child)
            if child.tag in result:
                if type(result[child.tag]) is list:
                    result[child.tag].append(child_data)
                else:
                    result[child.tag] = [result[child.tag], child_data]
            else:
                result[child.tag] = child_data
        return result
    
    def get_zap_output(self):
        return self.zap_output
    
    def extract_features(self,data):
        xml_string=data
        start = xml_string.find("<alerts>")
        end = xml_string.rfind("</alerts>") + len("</alerts>")
        
        if start != -1 and end != -1:
            xml_content = xml_string[start:end]
            root = ET.fromstring(xml_content)
            result_dict = {root.tag: self.xml_to_dict(root)}
            st=[]
            for x in result_dict['alerts']['alertitem']:
                if int(x['riskcode'])>=2 and int(x['confidence'])>=2:
                    st.append({'name':x['name'],'desc':x['desc'],'urls':[y['uri'] for y in x['instances']['instance']]})
            if len(st)>0:
                self.zap_output=st
                return True
            else:
                return False
        else:
            return False
        
    def run(self, https=False):
        cmd = f"zaproxy -cmd -silent -quickurl http://{self.ip}"
        if https is True:
            cmd = f"zaproxy -cmd -silent -quickurl https://{self.ip}/"
        result = run_command(cmd)
        # print(result)

        features_success = False
        if result['status'] == "success":
            output = result['output']
            features_success = self.extract_features(output)
            print(features_success)
            if features_success is True:
                result['status'] = 'success'
            else:
                result['status'] = 'failure'
        return result
