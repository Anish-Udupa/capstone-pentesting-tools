import gym
from stable_baselines3 import DQN
from tool_env_dqn import ToolEnv
import sys

print(sys.argv)

if len(sys.argv) < 1:
    print("Invalid args")

ip = sys.argv[1]
env = ToolEnv(ip, training=False)
model = DQN.load("./trained_models/ghostcat_vuln/tool_agent_133_episodes.zip", env=env)

vec_env = model.get_env()

no_of_tools = 8
seen_tools = []
obs = vec_env.reset()
while True:
    print()
    print(f"Observation: {obs}")
    # tool = obs[0][0]
    # if tool in seen_tools:
    #     for i in range(0, no_of_tools):
    #         if i not in seen_tools:
    #             obs = [[i]]
    #             break
    action, _states = model.predict(obs, deterministic=True)
    print(f"Action: {action}")
    tool_action = action[0]
    # if tool_action in seen_tools:
    #     for i in range(0, no_of_tools):
    #         if i not in seen_tools:
    #             action = [i]
    #             break
    next_obs, rewards, dones, info = vec_env.step(action)
    print(obs, next_obs, rewards, dones, info)
    if tool_action not in seen_tools and rewards[0] > 0:
        seen_tools.append(tool_action)

    if dones[0] is True or len(seen_tools) >= no_of_tools:
        break
    obs = next_obs
    print()

vec_env.close()