from ../framework import Framework
class Pentest:
    def __init__(self,ip,uname,passw,tools):
        self.frame=Framework(ip,uname,passw)
        self.ip=ip
        self.tools=tools
        self.pq=[{1:'nmap'}]
        self.buffer=set()
    def deque(self):
        ele=self.pq[0].pop(sorted(self.pq[0].keys())[0])
        return ele
    def caller(self,ele)
        ele+="run_"
        out=self.frame[ele]()
        print(out)
        return out
    def call_api(self,output):
        thresh-=thresh
        response = openai.ChatCompletion.create(
        model="gpt-3.5-turbo",
        messages=[
            {"role": "system", "content": "You are a pentration tester, who uses pentration testing tools and based on their outputs decides which tool to use. Given the output of a particular tool determine which tool should be used from the list of tools-  nmap, nikito,wpscan,dirb,sqlmap,hydra,metasploit,paramiko."+data1},
            {"role": "user", "content": "after looking into the data and also exploring the tools tell me which tool to use mentioning only their names in the format :json format such as priority_no:tool name  like 1:nikto,etc"}
        ]
    )
        lis=response.choices[0].message.content
        print(lis)
        return json.loads(lis)
    def run_test(self):
        while(len(self.pq)>0):
            if thresh==0:
                break
            if len(self.pq[0])==0:
                self.pq.pop(0)
            else:
                ele=self.deque()
                if ele not in self.buffer:
                    self.buffer.add(ele)
                    out=self.caller(ele)
                    res=self.call_api(out)
                    self.pq.insert(0,res)
                    print(ele)
