class Pentest:
    def __init__(self,ip,tools):
        self.frame=Framework(ip)
        self.ip=ip
        self.tools=tools
        self.stack=['nmap']
        self.buffer=set()
        self.thresh=7
        
    def popstack(self):
        tool_name=self.stack.pop(0)
        return tool_name
    
    def caller(self,tool_name):
        func_name="run_"+tool_name
        func=getattr(self.frame,tool_name)
        out=func()
        if out==1:
            output=self.frame.tools_output[tool_name]
            print(output)
        else:
            output=''
        return output

    def call_api(self,output):
        self.thresh-=1
        response = openai.ChatCompletion.create(
        model="gpt-3.5-turbo",
        messages=[
            {"role": "system", "content": "You are a pentration tester, who uses pentration testing tools and based on their outputs decides which tool to use. Given the output of a particular tool determine which tool should be used from the list of tools-"+self.tools},
            {"role": "user", "content": "Output: " + output+" return a list of tools which should be used from the list of tools given, return format: [tool1,tools2, ..] only relevant to the output, do not suggest "+ buffer+" as these have already been used . Do not add any additional data."}
        ]
    )
        lis=response.choices[0].message.content
        print(lis)
        return ast.literal_eval(lis)
    def run_test(self):
        while(len(self.stack)>0):
            if self.thresh==0:
                break
            else:
                tool_name=self.popstack()
                if tool_name not in self.buffer:
                    self.buffer.add(tool_name)
                    out=self.caller(tool_name)
                    if len(out)>0:
                        res=self.call_api(out)
                        self.stack=res+self.stack
    def show_report(self):
        self.frame.finish()
tools=['nmap','gobuster','ssh_bruteforce','shellshock','sqlmap','wpscan','gospider']
ipaddr
ob=Pentest(ipaddr,tools)
ob.run_test()
ob.show_report()
