import openai

class Genai:
    def __init__(self,ip,framework,tools):
        self.ip=ip
        # self.tools=tools
        self.pq=['nmap']
        self.buffer=set()
        # self.thresh=10
    
    def caller(self,ele):
        ele="run_"+ele
        func=getattr(self.frame,ele)
        out=func()
        # print(out))
        return out
    def call_api(self,output):
        self.thresh-=1
        response = openai.ChatCompletion.create(
        model="gpt-3.5-turbo",
        messages=[
            {"role": "system", "content": "You are a pentration tester, who uses pentration testing tools and based on their outputs decides which tool to use. Given the output of a particular tool determine which tool should be used from the list of tools-  nmap, nikito,wpscan,dirb,sqlmap,hydra,metasploit,paramiko."+output},
            {"role": "user", "content": "After reading the output, decide which tools should be usedd from the list of tools given, return a string in json format tell me which tool to use mentioning only their names in the format :json format such as priority_no:tool name  like 1:nikto,etc"}
        ])
        lis=response.choices[0].message.content
        print(lis)
        return json.loads(lis)
    def run_test(self):
        while(len(self.pq)>0):
            if self.thresh==0:
                break
            if len(self.pq[0])==0:
                self.pq.pop(0)
            else:
                ele=self.deque()
                if ele not in self.buffer:
                    self.buffer.add(ele)
                    out=self.caller(ele)
                    res=self.call_api(out)
                    self.pq.insert(0,res)
                    print(ele)
