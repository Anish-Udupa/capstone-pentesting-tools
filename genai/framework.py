import subprocess
from report import Report
from genai import Genai

def run_command(cmd):
        try:
            # result = subprocess.run(cmd.split(), check=True, shell=True, capture_output=True, text=True)
            cmd_output = subprocess.run(cmd.split(), check=True, capture_output=True, text=True)
            result = {
                "status": 'success',
                "output": cmd_output
            }
            return result
        except Exception as e:
            print(f"Failed to run command {cmd}.\nException: {e}")
            result = {
                 "status": 'fail',
                 "output": f"Failed to run command {cmd}.\nException: {e}"
            }
            return result

def get_cmd(tool):
    return genai.get_cmd(tool)

def get_features(output):
    return genai.get_features(output)

def get_next_tools(output):
    return genai.get_next_tools(output)

def suggest_better_cmd(tool, error):
    return genai.suggest_better_cmd(tool, error)


# MAIN
ip = ''
goal_state_reached = False
tool_output_stack = []
used_tools = []
tool_stack = ['nmap']
report = Report()
genai = Genai(ip)

while goal_state_reached is False or len(tool_stack) > 0:
    tool = tool_stack.pop()
    cmd = get_cmd(tool)
    output = run_command(cmd)

    if(output.status == "success"):
        output = output.output
        tool_output_stack.append({
            "tool": tool,
            "output": output,
        })
        used_tools.append(tool)
        features = get_features(output)
        report.write_tool_output(tool, output)
        next_tools_list = get_next_tools(output)

        for _tool in next_tools_list.reverse():
            tool_stack.append(_tool)
    else:
        cmd = suggest_better_cmd(tool, output.output)

report.save()