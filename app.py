from flask import Flask, request, jsonify,send_file
from flask_cors import CORS, cross_origin
import fitz
import requests
import subprocess
from test_ori import Pentest


app = Flask(__name__)
cors = CORS(app)
app.config['CORS_HEADERS'] = 'Content-Type'
@app.route('/')
def hello():
    return 'Hello'

@app.post("/api/submit")
@cross_origin()
def submit():
    data = request.get_json()
    input_text = data.get('ip')
    algorithm = data.get('algorithm')
    tools_run=['nmap','gobuster']
    if algorithm=='option1': #write genai caller
        print('genai')
        tools=['nmap','gobuster','sqlmap','wpscan','gospider','zap','ghostcat','ssh_login']
        ob=Pentest(input_text,tools)
        ob.run_test()
        ob.show_report()
        tools_run=ob.tools_return()
        print(tools_run)
        response_data = {'inputText': [input_text,algorithm], 'tools':tools_run}
        return jsonify(response_data)

    elif algorithm=='option2':# write DQN call creation
        print('DQN')
        cmd = f"python3 run_rl_dqn.py {input_text}"
        print("Command provided:", cmd)
        try:
            cmd_result = subprocess.run(cmd, check=False, capture_output=True, text=True, shell=True)
            print(cmd_result)
        except:
            print("An error occured while running tools")
    # Process input_text as needed
    print(f'Received inputText: {input_text}, {algorithm}')
    response_data = {'inputText': [input_text,algorithm], 'tools':tools_run}
    return jsonify(response_data)
@app.route("/api/report")
@cross_origin()
def report():
    pdf_path = './report/report.pdf'
    response = send_file(pdf_path, as_attachment=True)
    response.headers['Content-Type'] = 'application/pdf'
    return response

@app.route('/api/insights', methods=['POST'])
def upload_pdf():
    data = request.get_json()
    tool = data.get('tools')
    file = './report/report.pdf'
    text = extract_text_from_pdf(file)
    vulnerability_level = analyze_vulnerability(tool)
    insights = get_insights(tool,vulnerability_level)
    return jsonify(tools=tool,vulnerability_level=vulnerability_level, insights=insights,report=text)

def extract_text_from_pdf(file):
    text = ""
    with fitz.open(file) as doc:  
        for page in doc:
            text += page.get_text()
    return text

def analyze_vulnerability(text):
    if 'sqlmap' in text or 'shellshock' in text or 'ghostcat' in text:
        return 'High'
    elif 'zap' in text or 'gospider' in text or ' wpscan' in text:
        return 'Medium'
    else:
        return 'Low'

def get_insights(text,level):
    ins=''
    if 'shellshock' in text:
        ins+='Shellshock allows for Remote Code Execution (RCE). This is due to older versions of Bash.\n'
    if 'sqlmap' in text:
        ins+='Sqlmap allows for SQL Injections which allows for data theft.\n'
    if 'ghostcat' in text:
        ins+='Ghostcat allows for the reading and inclusion of files in Apache Tomcat servers. \n'
    if 'spring4shell' in text:
        ins+='Spring4shell is a critical vulnerability in the Spring Framework. Patching the framework and applications to the latest version is essential for mitigation.\n'
    if 'log4shell' in text:
        ins+=' Log4Shell is a vulnerability in the Log4j logging framework and enables Remote Code Execution (RCE) on vulnerable systems.'
    if ins=='' and level=='Low':
        ins='Basic network discovery and crawling tools are accessible hence there is no security exploits available. Your system is secure '
    if ins=='' and level=='Medium':
        ins='Regular updates and security plugins help mitigate the vulnerabilities discovered by hacking tools. The listed patches under the tools need to updated else it may lead to a vulnerability later'
    return ins
app.run(host="0.0.0.0")
